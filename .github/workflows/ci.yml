name: Unit, Integration, and E2E Tests
on: 
  pull_request:
    branches:
    - main
  push:
    paths-ignore:
    - 'README.md'
    - 'docs/**'
    branches: 
    - main

jobs:
  unit:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.19.x'
          cache: true
          check-latest: true
      - name: Build
        run: make build
      - name: Test
        run: make test-unit-coverage

  test-docker-build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      max-parallel: 3
      matrix:
        image:
        - git
        - image-processing
        - waiter
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to container registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login -u ${{ github.repository_owner }} --password-stdin ghcr.io
      - name: Build Image
        working-directory: images/${{ matrix.image }}
        run: |
          IMAGE=test-build/base-${{ matrix.image }} docker buildx bake --file ../docker-bake.hcl

  integration:
    strategy:
      fail-fast: false
      matrix:
        kubernetes:
          - v1.24.7
          - v1.25.3
      max-parallel: 2
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.19.x'
          cache: true
          check-latest: true
      - name: Create kind cluster
        uses: helm/kind-action@v1
        with:
          version: v0.17.0
          node_image: kindest/node:${{ matrix.kubernetes }}
          cluster_name: kind
          wait: 120s
      - uses: openshift-pipelines/setup-tektoncd@v1
        with:
          pipeline_version: v0.44.0
      - name: Install Ko
        uses: ko-build/setup-ko@v0.6
        with:
          version: v0.13.0
      - name: Test
        run: |
          export GIT_CONTAINER_IMAGE="$(KO_DOCKER_REPO=kind.local ko publish ./cmd/git)"
          make test-integration

  e2e:
    strategy:
      fail-fast: false
      matrix:
        kubernetes:
          - v1.24.7
          - v1.25.3
      max-parallel: 2
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.19.x'
          cache: true
          check-latest: true
      - name: Create kind cluster
        uses: helm/kind-action@v1
        with:
          version: v0.17.0
          node_image: kindest/node:${{ matrix.kubernetes }}
          cluster_name: kind
          config: test/kind/config.yaml
          wait: 120s
      - uses: openshift-pipelines/setup-tektoncd@v1
        with:
          pipeline_version: v0.44.0
      - name: Install Ko
        uses: ko-build/setup-ko@v0.6
        with:
          version: v0.13.0
      - name: Install Shipwright Build
        run: |
          make install-controller-kind
          kubectl -n shipwright-build rollout status deployment shipwright-build-controller --timeout=1m || true
      - name: Test
        run: |
          export TEST_NAMESPACE=shipwright-build
          export TEST_IMAGE_REPO=registry.registry.svc.cluster.local:32222/shipwright-io/build-e2e
          export TEST_IMAGE_REPO_INSECURE=true
          export TEST_E2E_TIMEOUT_MULTIPLIER=2
          make test-e2e
      - name: Build controller logs
        if: ${{ failure() }}
        run: |
          echo "# Pods:"
          kubectl -n shipwright-build get pod
          PODS=$(kubectl -n shipwright-build get pod -o json)
          POD_NAME=$(echo "${PODS}" | jq -r '.items[] | select(.metadata.name | startswith("shipwright-build-controller-")) | .metadata.name')
          if [ "${POD_NAME}" != "" ]; then
            RESTART_COUNT=$(echo "${PODS}" | jq -r ".items[] | select(.metadata.name == \"${POD_NAME}\") | .status.containerStatuses[0].restartCount")
            if [ "${RESTART_COUNT}" != "0" ]; then
              echo "# Previous logs:"
              kubectl -n shipwright-build logs "${POD_NAME}" --previous || true
            fi
            echo "# Logs:"
            kubectl -n shipwright-build logs "${POD_NAME}"
          else
            echo "# Pod is missing, there are no logs to retrieve, bailing out..."
          fi
